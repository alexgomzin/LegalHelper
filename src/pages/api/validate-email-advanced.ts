import { NextApiRequest, NextApiResponse } from 'next'
import { validateEmailForRegistration, isTemporaryEmail } from '@/utils/emailValidation'

/**
 * Check against external disposable email detection services
 * This is a fallback when our internal validation isn't sufficient
 */
async function checkExternalDisposableEmailServices(domain: string): Promise<boolean> {
  // You can integrate with services like:
  // - https://www.disposable-email-detector.com/
  // - https://emailrep.io/
  // - https://api.antideo.com/
  
  // For now, we'll implement a simple check against common patterns
  // In production, you might want to use a paid service for better accuracy
  
  try {
    // Example: Check if domain is very new (suspicious)
    // This is a simplified check - in production you'd use proper domain age APIs
    
    // Check for domains that look auto-generated
    const autoGeneratedPattern = /^[a-z]{1,3}\d+[a-z]*\.(tk|ml|ga|cf|gq|cc)$/i;
    if (autoGeneratedPattern.test(domain)) {
      return true;
    }

    // Check for domains with suspicious keywords in different languages
    const suspiciousKeywords = [
      'temp', 'mail', 'fake', 'spam', 'trash', 'throw', 'dispos',
      'guerrilla', 'minute', 'second', 'instant', 'quick', 'fast',
      'burner', 'drop', 'catch', 'expire', 'nospam', 'antispam'
    ];
    
    for (const keyword of suspiciousKeywords) {
      if (domain.includes(keyword)) {
        return true;
      }
    }

    return false;
  } catch (error) {
    console.error('External validation error:', error);
    return false; // Don't block if external service fails
  }
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' })
  }

  try {
    const { email } = req.body

    if (!email) {
      return res.status(400).json({ 
        isValid: false, 
        error: 'Email is required' 
      })
    }

    // Step 1: Basic validation
    const basicValidation = validateEmailForRegistration(email)
    if (!basicValidation.isValid) {
      return res.status(200).json({
        isValid: false,
        error: basicValidation.error,
        isTemporary: true,
        domain: email.split('@')[1]?.toLowerCase(),
        detectionMethod: 'hardcoded_list'
      })
    }

    // Step 2: Pattern-based detection
    const isTemp = isTemporaryEmail(email)
    if (isTemp) {
      return res.status(200).json({
        isValid: false,
        error: 'Temporary or disposable email addresses are not allowed. Please use a permanent email address.',
        isTemporary: true,
        domain: email.split('@')[1]?.toLowerCase(),
        detectionMethod: 'pattern_detection'
      })
    }

    // Step 3: External service check (for domains that passed our checks)
    const domain = email.split('@')[1]?.toLowerCase()
    const externalCheck = await checkExternalDisposableEmailServices(domain)
    if (externalCheck) {
      return res.status(200).json({
        isValid: false,
        error: 'This email domain appears to be temporary or disposable. Please use a permanent email address.',
        isTemporary: true,
        domain,
        detectionMethod: 'external_service'
      })
    }

    // All checks passed
    return res.status(200).json({
      isValid: true,
      isTemporary: false,
      domain,
      detectionMethod: 'all_checks_passed'
    })
  } catch (error) {
    console.error('Advanced email validation error:', error)
    return res.status(500).json({ 
      isValid: false, 
      error: 'Server error during validation' 
    })
  }
} 